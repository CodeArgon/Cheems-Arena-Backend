{"version":3,"sources":["components/Registration.tsx","App.tsx","reportWebVitals.ts","index.jsx"],"names":["Register","walletPubkey","wallet","useWallet","useState","setTxt","username","email","password","walletAddress","formData","setFormData","anchorWallet","useMemo","publicKey","signAllTransactions","signTransaction","onChange","e","target","name","value","onSubmit","a","preventDefault","newUser","console","log","body","JSON","stringify","config","headers","alert","axios","post","useEffect","toString","getWalletAddress","className","type","placeholder","test","onInputChange","style","backgroundColor","require","theme","createTheme","palette","network","process","REACT_APP_SOLANA_NETWORK","App","endpoint","clusterApiUrl","wallets","getPhantomWallet","ThemeProvider","ConnectionProvider","WalletProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8870f406.chunk.js","sourcesContent":["import { Fragment, useState, useEffect, useMemo } from 'react'\r\nimport { PublicKey } from '@solana/web3.js'\r\nimport { useWallet } from '@solana/wallet-adapter-react'\r\nimport '@solana/wallet-adapter-react-ui/styles.css'\r\nimport {\r\n  WalletModalProvider,\r\n  WalletMultiButton,\r\n} from '@solana/wallet-adapter-react-ui'\r\nimport axios from 'axios'\r\n\r\nconst Register = () => {\r\n  let walletPubkey: string\r\n  const wallet = useWallet()\r\n  const [txt, setTxt] = useState<any[] | []>([])\r\n  const [formData, setFormData] = useState({\r\n    username: '',\r\n    email: '',\r\n    password: '',\r\n    walletAddress: '',\r\n  })\r\n\r\n  const anchorWallet = useMemo(() => {\r\n    if (\r\n      !wallet ||\r\n      !wallet.publicKey ||\r\n      !wallet.signAllTransactions ||\r\n      !wallet.signTransaction\r\n    ) {\r\n      return\r\n    }\r\n\r\n    return {\r\n      publicKey: wallet.publicKey,\r\n      signAllTransactions: wallet.signAllTransactions,\r\n      signTransaction: wallet.signTransaction,\r\n    }\r\n  }, [wallet])\r\n\r\n  const { username, email, password, walletAddress } = formData\r\n\r\n  const onChange = (e: any) => {\r\n    setFormData({ ...formData, [e.target.name]: e.target.value })\r\n  }\r\n\r\n  const getWalletAddress = (anchorWallet: { publicKey: PublicKey }) => {\r\n    walletPubkey = anchorWallet.publicKey?.toString()\r\n  }\r\n  const onSubmit = async (e: any) => {\r\n    e.preventDefault()\r\n    const newUser = {\r\n      username,\r\n      email,\r\n      password,\r\n      walletAddress,\r\n    }\r\n    newUser.walletAddress = walletPubkey\r\n\r\n    console.log(walletPubkey)\r\n\r\n    const body = JSON.stringify(newUser)\r\n    console.log(body)\r\n\r\n    const config = {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      }\r\n  \r\n      try {\r\n        if(walletAddress === null){\r\n            alert(\"Connect wallet\")\r\n        }else{\r\n            const res = await axios.post(`http://ec2-13-38-127-249.eu-west-3.compute.amazonaws.com/api/v1/signup`, body, config)\r\n        }\r\n        // if (res.data.status == 400) {\r\n        //   alert(res.data.msg)\r\n        // }\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (anchorWallet) {\r\n      getWalletAddress(anchorWallet)\r\n    }\r\n  }, [anchorWallet])\r\n\r\n  const onInputChange = (e: any) => {\r\n    const { value } = e.target\r\n\r\n    const regex = /^(?:[a-z0-9]+|\\d+)$/\r\n    if (value === '' || regex.test(value)) {\r\n      setTxt(value)\r\n    } else {\r\n      alert(\r\n        'Use only lowercase alphabets and numbers, Remove special character'\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className='container text-center'>\r\n        <h1 className='large'>Sign Up</h1>\r\n        <p className='lead'>\r\n          <i className='fas fa-user'></i> Create Your Account\r\n        </p>\r\n        <form className='form' onSubmit={onSubmit}>\r\n          <div className='form-group'>\r\n            <input\r\n              className='my-3'\r\n              type='text'\r\n              placeholder='Username'\r\n              name='username'\r\n              value={username}\r\n              onChange={(e) => {\r\n                onChange(e)\r\n                onInputChange(e)\r\n              }}\r\n            />\r\n            <br />\r\n            <input\r\n              className='my-3'\r\n              type='email'\r\n              placeholder='Email'\r\n              name='email'\r\n              value={email}\r\n              onChange={(e) => onChange(e)}\r\n            />\r\n            <br />\r\n            <input\r\n              className='my-3'\r\n              type='password'\r\n              placeholder='Password'\r\n              name='password'\r\n              //   minLength='8'\r\n              value={password}\r\n              onChange={(e) => onChange(e)}\r\n            />\r\n            <br />\r\n            <div>\r\n              <WalletModalProvider>\r\n                <WalletMultiButton style={{ backgroundColor: '#a855f7' }} />\r\n              </WalletModalProvider>\r\n            </div>\r\n          </div>\r\n          <br />\r\n          <input\r\n            type='submit'\r\n            className='btn btn-outline-dark'\r\n            value='Register'\r\n          />\r\n        </form>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\nexport default Register\r\n","import './App.css';\r\nimport { useMemo } from 'react';\r\nimport { clusterApiUrl } from '@solana/web3.js';\r\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\r\nimport {\r\n  getPhantomWallet,\r\n} from '@solana/wallet-adapter-wallets';\r\n\r\nimport Register from './components/Registration';\r\n\r\nimport {\r\n  ConnectionProvider,\r\n  WalletProvider,\r\n} from '@solana/wallet-adapter-react';\r\nimport { WalletDialogProvider } from '@solana/wallet-adapter-material-ui';\r\nimport NFTDisplay from './components/NFTDisplay'\r\n\r\nimport { ThemeProvider, createTheme } from '@material-ui/core';\r\nrequire('dotenv').config()\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    type: 'dark',\r\n  },\r\n});\r\n\r\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\r\nconst App = () => {\r\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\r\n\r\n  const wallets = useMemo(\r\n    () => [\r\n      getPhantomWallet(),\r\n    ],\r\n    [],\r\n  );\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <ConnectionProvider endpoint={endpoint}>\r\n        <WalletProvider wallets={wallets} >\r\n          <WalletDialogProvider>\r\n             <Register />\r\n              {/* <NFTDisplay /> */}\r\n          </WalletDialogProvider>\r\n        </WalletProvider>\r\n      </ConnectionProvider>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}